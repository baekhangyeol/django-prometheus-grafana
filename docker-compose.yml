version: "3"

services:
  backend:
    build: './backend'
    command: gunicorn backend.wsgi --bind 0.0.0.0:8000
    ports:
      - 8000:8000
    volumes:
      - ./backend/:/backend/
    expose:
      - 8000

  nginx:
    build: ./nginx
    ports:
      - 80:8080
    volumes:
      - ./nginx/log:/var/log/nginx
    depends_on:
      - backend

  prometheus:
    image: prom/prometheus:latest
    restart: always
    ports:
      - 9090:9090
    links:
      - cadvisor
      - alertmanager
    volumes:
      - ./monitoring/prometheus/:/etc/prometheus/
    user: root
    depends_on:
      - cadvisor
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - 3000:3000
    volumes:
      - ./monitoring/grafana/:/var/lib/grafana
      - ./monitoring/grafana/datasource.yml:/etc/grafana/provisioning/datasource.yml
    depends_on:
      - prometheus
      - backend

  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points'
      - '^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - 9100:9100
    restart: always

  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./monitoring/alertmanager/:/etc/alertmanager/
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:v0.46.0
    ports:
      - 8080:8080
    volumes:
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
    restart: always